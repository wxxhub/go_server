// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace pt {

void protobuf_ShutdownFile_game_2eproto() {
  delete req_login::default_instance_;
  delete obj_user_info::default_instance_;
  delete obj_user_game_record::default_instance_;
  delete rsp_login::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_game_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_game_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  req_login::default_instance_ = new req_login();
  obj_user_info::default_instance_ = new obj_user_info();
  obj_user_game_record::default_instance_ = new obj_user_game_record();
  rsp_login::default_instance_ = new rsp_login();
  req_login::default_instance_->InitAsDefaultInstance();
  obj_user_info::default_instance_->InitAsDefaultInstance();
  obj_user_game_record::default_instance_->InitAsDefaultInstance();
  rsp_login::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_game_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_game_2eproto_once_);
void protobuf_AddDesc_game_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_game_2eproto_once_,
                 &protobuf_AddDesc_game_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_game_2eproto {
  StaticDescriptorInitializer_game_2eproto() {
    protobuf_AddDesc_game_2eproto();
  }
} static_descriptor_initializer_game_2eproto_;
#endif

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_login::kUsernameFieldNumber;
const int req_login::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_login::req_login()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.req_login)
}

void req_login::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

req_login::req_login(const req_login& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pt.req_login)
}

void req_login::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

req_login::~req_login() {
  // @@protoc_insertion_point(destructor:pt.req_login)
  SharedDtor();
}

void req_login::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void req_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const req_login& req_login::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
#endif
  return *default_instance_;
}

req_login* req_login::default_instance_ = NULL;

req_login* req_login::New(::google::protobuf::Arena* arena) const {
  req_login* n = new req_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_login::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.req_login)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool req_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.req_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.req_login.username"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.req_login.password"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.req_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.req_login)
  return false;
#undef DO_
}

void req_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.req_login)
  // optional string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.req_login.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.req_login.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.req_login)
}

int req_login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pt.req_login)
  int total_size = 0;

  // optional string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // optional string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_login::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const req_login*>(&from));
}

void req_login::MergeFrom(const req_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.req_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void req_login::CopyFrom(const req_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.req_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_login::IsInitialized() const {

  return true;
}

void req_login::Swap(req_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_login::InternalSwap(req_login* other) {
  username_.Swap(&other->username_);
  password_.Swap(&other->password_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string req_login::GetTypeName() const {
  return "pt.req_login";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_login

// optional string username = 1;
void req_login::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& req_login::username() const {
  // @@protoc_insertion_point(field_get:pt.req_login.username)
  return username_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void req_login::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.req_login.username)
}
 void req_login::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.req_login.username)
}
 void req_login::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.req_login.username)
}
 ::std::string* req_login::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:pt.req_login.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* req_login::release_username() {
  // @@protoc_insertion_point(field_release:pt.req_login.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void req_login::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:pt.req_login.username)
}

// optional string password = 2;
void req_login::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& req_login::password() const {
  // @@protoc_insertion_point(field_get:pt.req_login.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void req_login::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.req_login.password)
}
 void req_login::set_password(const char* value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.req_login.password)
}
 void req_login::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.req_login.password)
}
 ::std::string* req_login::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:pt.req_login.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* req_login::release_password() {
  // @@protoc_insertion_point(field_release:pt.req_login.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void req_login::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:pt.req_login.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_user_info::kNicknameFieldNumber;
const int obj_user_info::kIconFieldNumber;
const int obj_user_info::kCoinFieldNumber;
const int obj_user_info::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_user_info::obj_user_info()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.obj_user_info)
}

void obj_user_info::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

obj_user_info::obj_user_info(const obj_user_info& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pt.obj_user_info)
}

void obj_user_info::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_ = GOOGLE_LONGLONG(0);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

obj_user_info::~obj_user_info() {
  // @@protoc_insertion_point(destructor:pt.obj_user_info)
  SharedDtor();
}

void obj_user_info::SharedDtor() {
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void obj_user_info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const obj_user_info& obj_user_info::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
#endif
  return *default_instance_;
}

obj_user_info* obj_user_info::default_instance_ = NULL;

obj_user_info* obj_user_info::New(::google::protobuf::Arena* arena) const {
  obj_user_info* n = new obj_user_info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void obj_user_info::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.obj_user_info)
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coin_ = GOOGLE_LONGLONG(0);
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool obj_user_info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.obj_user_info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_user_info.nickname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_icon;
        break;
      }

      // optional string icon = 2;
      case 2: {
        if (tag == 18) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_user_info.icon"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_coin;
        break;
      }

      // optional int64 coin = 3;
      case 3: {
        if (tag == 24) {
         parse_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional string location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_user_info.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.obj_user_info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.obj_user_info)
  return false;
#undef DO_
}

void obj_user_info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.obj_user_info)
  // optional string nickname = 1;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_user_info.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // optional string icon = 2;
  if (this->icon().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_user_info.icon");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->icon(), output);
  }

  // optional int64 coin = 3;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->coin(), output);
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_user_info.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->location(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.obj_user_info)
}

int obj_user_info::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pt.obj_user_info)
  int total_size = 0;

  // optional string nickname = 1;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // optional string icon = 2;
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->icon());
  }

  // optional int64 coin = 3;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->coin());
  }

  // optional string location = 4;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obj_user_info::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const obj_user_info*>(&from));
}

void obj_user_info::MergeFrom(const obj_user_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.obj_user_info)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.icon().size() > 0) {

    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
}

void obj_user_info::CopyFrom(const obj_user_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.obj_user_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_user_info::IsInitialized() const {

  return true;
}

void obj_user_info::Swap(obj_user_info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_user_info::InternalSwap(obj_user_info* other) {
  nickname_.Swap(&other->nickname_);
  icon_.Swap(&other->icon_);
  std::swap(coin_, other->coin_);
  location_.Swap(&other->location_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string obj_user_info::GetTypeName() const {
  return "pt.obj_user_info";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// obj_user_info

// optional string nickname = 1;
void obj_user_info::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& obj_user_info::nickname() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.nickname)
  return nickname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.nickname)
}
 void obj_user_info::set_nickname(const char* value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.nickname)
}
 void obj_user_info::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.nickname)
}
 ::std::string* obj_user_info::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* obj_user_info::release_nickname() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.nickname)
}

// optional string icon = 2;
void obj_user_info::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& obj_user_info::icon() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.icon)
  return icon_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_icon(const ::std::string& value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.icon)
}
 void obj_user_info::set_icon(const char* value) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.icon)
}
 void obj_user_info::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.icon)
}
 ::std::string* obj_user_info::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* obj_user_info::release_icon() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.icon)
  
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.icon)
}

// optional int64 coin = 3;
void obj_user_info::clear_coin() {
  coin_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 obj_user_info::coin() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.coin)
  return coin_;
}
 void obj_user_info::set_coin(::google::protobuf::int64 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_info.coin)
}

// optional string location = 4;
void obj_user_info::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& obj_user_info::location() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_info.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_info.location)
}
 void obj_user_info::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_info.location)
}
 void obj_user_info::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_info.location)
}
 ::std::string* obj_user_info::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_info.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* obj_user_info::release_location() {
  // @@protoc_insertion_point(field_release:pt.obj_user_info.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_info::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_info.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_user_game_record::kTimeFieldNumber;
const int obj_user_game_record::kKillFieldNumber;
const int obj_user_game_record::kDeadFieldNumber;
const int obj_user_game_record::kAssistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_user_game_record::obj_user_game_record()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.obj_user_game_record)
}

void obj_user_game_record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

obj_user_game_record::obj_user_game_record(const obj_user_game_record& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pt.obj_user_game_record)
}

void obj_user_game_record::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kill_ = 0;
  dead_ = 0;
  assist_ = 0;
}

obj_user_game_record::~obj_user_game_record() {
  // @@protoc_insertion_point(destructor:pt.obj_user_game_record)
  SharedDtor();
}

void obj_user_game_record::SharedDtor() {
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void obj_user_game_record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const obj_user_game_record& obj_user_game_record::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
#endif
  return *default_instance_;
}

obj_user_game_record* obj_user_game_record::default_instance_ = NULL;

obj_user_game_record* obj_user_game_record::New(::google::protobuf::Arena* arena) const {
  obj_user_game_record* n = new obj_user_game_record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void obj_user_game_record::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.obj_user_game_record)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(obj_user_game_record, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<obj_user_game_record*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(kill_, assist_);
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool obj_user_game_record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.obj_user_game_record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string time = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_user_game_record.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kill;
        break;
      }

      // optional int32 kill = 2;
      case 2: {
        if (tag == 16) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dead;
        break;
      }

      // optional int32 dead = 3;
      case 3: {
        if (tag == 24) {
         parse_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dead_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_assist;
        break;
      }

      // optional int32 assist = 4;
      case 4: {
        if (tag == 32) {
         parse_assist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assist_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.obj_user_game_record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.obj_user_game_record)
  return false;
#undef DO_
}

void obj_user_game_record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.obj_user_game_record)
  // optional string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_user_game_record.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  // optional int32 kill = 2;
  if (this->kill() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill(), output);
  }

  // optional int32 dead = 3;
  if (this->dead() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dead(), output);
  }

  // optional int32 assist = 4;
  if (this->assist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->assist(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.obj_user_game_record)
}

int obj_user_game_record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pt.obj_user_game_record)
  int total_size = 0;

  // optional string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional int32 kill = 2;
  if (this->kill() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kill());
  }

  // optional int32 dead = 3;
  if (this->dead() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dead());
  }

  // optional int32 assist = 4;
  if (this->assist() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->assist());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obj_user_game_record::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const obj_user_game_record*>(&from));
}

void obj_user_game_record::MergeFrom(const obj_user_game_record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.obj_user_game_record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.kill() != 0) {
    set_kill(from.kill());
  }
  if (from.dead() != 0) {
    set_dead(from.dead());
  }
  if (from.assist() != 0) {
    set_assist(from.assist());
  }
}

void obj_user_game_record::CopyFrom(const obj_user_game_record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.obj_user_game_record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_user_game_record::IsInitialized() const {

  return true;
}

void obj_user_game_record::Swap(obj_user_game_record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_user_game_record::InternalSwap(obj_user_game_record* other) {
  time_.Swap(&other->time_);
  std::swap(kill_, other->kill_);
  std::swap(dead_, other->dead_);
  std::swap(assist_, other->assist_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string obj_user_game_record::GetTypeName() const {
  return "pt.obj_user_game_record";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// obj_user_game_record

// optional string time = 1;
void obj_user_game_record::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& obj_user_game_record::time() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.time)
  return time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_game_record::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.time)
}
 void obj_user_game_record::set_time(const char* value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_user_game_record.time)
}
 void obj_user_game_record::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_user_game_record.time)
}
 ::std::string* obj_user_game_record::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_user_game_record.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* obj_user_game_record::release_time() {
  // @@protoc_insertion_point(field_release:pt.obj_user_game_record.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void obj_user_game_record::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_user_game_record.time)
}

// optional int32 kill = 2;
void obj_user_game_record::clear_kill() {
  kill_ = 0;
}
 ::google::protobuf::int32 obj_user_game_record::kill() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.kill)
  return kill_;
}
 void obj_user_game_record::set_kill(::google::protobuf::int32 value) {
  
  kill_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.kill)
}

// optional int32 dead = 3;
void obj_user_game_record::clear_dead() {
  dead_ = 0;
}
 ::google::protobuf::int32 obj_user_game_record::dead() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.dead)
  return dead_;
}
 void obj_user_game_record::set_dead(::google::protobuf::int32 value) {
  
  dead_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.dead)
}

// optional int32 assist = 4;
void obj_user_game_record::clear_assist() {
  assist_ = 0;
}
 ::google::protobuf::int32 obj_user_game_record::assist() const {
  // @@protoc_insertion_point(field_get:pt.obj_user_game_record.assist)
  return assist_;
}
 void obj_user_game_record::set_assist(::google::protobuf::int32 value) {
  
  assist_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_user_game_record.assist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

bool rsp_login_RET_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const rsp_login_RET rsp_login::SUCCESS;
const rsp_login_RET rsp_login::ACCOUNT_NULL;
const rsp_login_RET rsp_login::ACCOUNT_LOCK;
const rsp_login_RET rsp_login::PASSWORD_ERROR;
const rsp_login_RET rsp_login::ERROR;
const rsp_login_RET rsp_login::RET_MIN;
const rsp_login_RET rsp_login::RET_MAX;
const int rsp_login::RET_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_login::kRetFieldNumber;
const int rsp_login::kUserInfoFieldNumber;
const int rsp_login::kRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_login::rsp_login()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.rsp_login)
}

void rsp_login::InitAsDefaultInstance() {
  _is_default_instance_ = true;
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  user_info_ = const_cast< ::pt::obj_user_info*>(
      ::pt::obj_user_info::internal_default_instance());
#else
  user_info_ = const_cast< ::pt::obj_user_info*>(&::pt::obj_user_info::default_instance());
#endif
}

rsp_login::rsp_login(const rsp_login& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pt.rsp_login)
}

void rsp_login::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  ret_ = 0;
  user_info_ = NULL;
}

rsp_login::~rsp_login() {
  // @@protoc_insertion_point(destructor:pt.rsp_login)
  SharedDtor();
}

void rsp_login::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete user_info_;
  }
}

void rsp_login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const rsp_login& rsp_login::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_game_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_game_2eproto();
#endif
  return *default_instance_;
}

rsp_login* rsp_login::default_instance_ = NULL;

rsp_login* rsp_login::New(::google::protobuf::Arena* arena) const {
  rsp_login* n = new rsp_login;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_login::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.rsp_login)
  ret_ = 0;
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) delete user_info_;
  user_info_ = NULL;
  record_.Clear();
}

bool rsp_login::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.rsp_login)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // optional .pt.obj_user_info user_info = 2;
      case 2: {
        if (tag == 18) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_record;
        break;
      }

      // repeated .pt.obj_user_game_record record = 3;
      case 3: {
        if (tag == 26) {
         parse_record:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_record;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.rsp_login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.rsp_login)
  return false;
#undef DO_
}

void rsp_login::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.rsp_login)
  // optional int32 ret = 1;
  if (this->ret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .pt.obj_user_info user_info = 2;
  if (this->has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->user_info_, output);
  }

  // repeated .pt.obj_user_game_record record = 3;
  for (unsigned int i = 0, n = this->record_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->record(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.rsp_login)
}

int rsp_login::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:pt.rsp_login)
  int total_size = 0;

  // optional int32 ret = 1;
  if (this->ret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ret());
  }

  // optional .pt.obj_user_info user_info = 2;
  if (this->has_user_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_info_);
  }

  // repeated .pt.obj_user_game_record record = 3;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_login::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const rsp_login*>(&from));
}

void rsp_login::MergeFrom(const rsp_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.rsp_login)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  record_.MergeFrom(from.record_);
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.has_user_info()) {
    mutable_user_info()->::pt::obj_user_info::MergeFrom(from.user_info());
  }
}

void rsp_login::CopyFrom(const rsp_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.rsp_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_login::IsInitialized() const {

  return true;
}

void rsp_login::Swap(rsp_login* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_login::InternalSwap(rsp_login* other) {
  std::swap(ret_, other->ret_);
  std::swap(user_info_, other->user_info_);
  record_.UnsafeArenaSwap(&other->record_);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string rsp_login::GetTypeName() const {
  return "pt.rsp_login";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_login

// optional int32 ret = 1;
void rsp_login::clear_ret() {
  ret_ = 0;
}
 ::google::protobuf::int32 rsp_login::ret() const {
  // @@protoc_insertion_point(field_get:pt.rsp_login.ret)
  return ret_;
}
 void rsp_login::set_ret(::google::protobuf::int32 value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:pt.rsp_login.ret)
}

// optional .pt.obj_user_info user_info = 2;
bool rsp_login::has_user_info() const {
  return !_is_default_instance_ && user_info_ != NULL;
}
void rsp_login::clear_user_info() {
  if (GetArenaNoVirtual() == NULL && user_info_ != NULL) delete user_info_;
  user_info_ = NULL;
}
const ::pt::obj_user_info& rsp_login::user_info() const {
  // @@protoc_insertion_point(field_get:pt.rsp_login.user_info)
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return user_info_ != NULL ? *user_info_ : *default_instance().user_info_;
#else
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
#endif
}
::pt::obj_user_info* rsp_login::mutable_user_info() {
  
  if (user_info_ == NULL) {
    user_info_ = new ::pt::obj_user_info;
  }
  // @@protoc_insertion_point(field_mutable:pt.rsp_login.user_info)
  return user_info_;
}
::pt::obj_user_info* rsp_login::release_user_info() {
  // @@protoc_insertion_point(field_release:pt.rsp_login.user_info)
  
  ::pt::obj_user_info* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
void rsp_login::set_allocated_user_info(::pt::obj_user_info* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.rsp_login.user_info)
}

// repeated .pt.obj_user_game_record record = 3;
int rsp_login::record_size() const {
  return record_.size();
}
void rsp_login::clear_record() {
  record_.Clear();
}
const ::pt::obj_user_game_record& rsp_login::record(int index) const {
  // @@protoc_insertion_point(field_get:pt.rsp_login.record)
  return record_.Get(index);
}
::pt::obj_user_game_record* rsp_login::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:pt.rsp_login.record)
  return record_.Mutable(index);
}
::pt::obj_user_game_record* rsp_login::add_record() {
  // @@protoc_insertion_point(field_add:pt.rsp_login.record)
  return record_.Add();
}
::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >*
rsp_login::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:pt.rsp_login.record)
  return &record_;
}
const ::google::protobuf::RepeatedPtrField< ::pt::obj_user_game_record >&
rsp_login::record() const {
  // @@protoc_insertion_point(field_list:pt.rsp_login.record)
  return record_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pt

// @@protoc_insertion_point(global_scope)
